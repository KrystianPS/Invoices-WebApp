// <auto-generated />
using System;
using InvoicesWebApp.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InvoicesWebApp.Infrastructure.Migrations
{
    [DbContext(typeof(InvoicesWebAppDbContext))]
    [Migration("20250103081309_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEmailSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("draft");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("UserCompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VatRateId")
                        .HasColumnType("int");

                    b.Property<int>("VatRateThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VatRateId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VatRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VatRateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("User");

                    b.Property<int>("UserCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCompanyId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.UserCompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserCompanyDetails");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.VatRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VatRateNameReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VatRateThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("VatRateThreshold")
                        .IsUnique();

                    b.ToTable("VatRate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VatRateNameReference = "Stawka podstawowa (23%)",
                            VatRateThreshold = 23.00m
                        },
                        new
                        {
                            Id = 2,
                            VatRateNameReference = "Stawka obniżona (8%)",
                            VatRateThreshold = 8.00m
                        },
                        new
                        {
                            Id = 3,
                            VatRateNameReference = "Stawka obniżona (5%)",
                            VatRateThreshold = 5.00m
                        },
                        new
                        {
                            Id = 4,
                            VatRateNameReference = "Stawka 0%",
                            VatRateThreshold = 0.00m
                        });
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Contractor", b =>
                {
                    b.HasOne("InvoicesWebApp.Domain.Entities.User", "User")
                        .WithMany("Contractors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("InvoicesWebApp.Domain.Entities.Contractor", "Contractor")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoicesWebApp.Domain.Entities.UserCompanyDetails", "UserCompany")
                        .WithMany("CompanyInvoices")
                        .HasForeignKey("UserCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InvoicesWebApp.Domain.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("User");

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("InvoicesWebApp.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoicesWebApp.Domain.Entities.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InvoicesWebApp.Domain.Entities.VatRate", "VatRate")
                        .WithMany()
                        .HasForeignKey("VatRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("VatRate");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("InvoicesWebApp.Domain.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoicesWebApp.Domain.Entities.VatRate", "VatRate")
                        .WithMany("Products")
                        .HasForeignKey("VatRateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VatRate");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.User", b =>
                {
                    b.HasOne("InvoicesWebApp.Domain.Entities.UserCompanyDetails", "UserCompany")
                        .WithOne("User")
                        .HasForeignKey("InvoicesWebApp.Domain.Entities.User", "UserCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCompany");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Contractor", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.Product", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Contractors");

                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.UserCompanyDetails", b =>
                {
                    b.Navigation("CompanyInvoices");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("InvoicesWebApp.Domain.Entities.VatRate", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
